[{"C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\index.js":"1","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\reportWebVitals.js":"2","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\App.js":"3","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Monaco\\index.js":"4","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Directory\\DirectoryBar.js":"5","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Project\\ProjectBar.js":"6","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Directory\\Directory.js":"7","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\url.js":"8","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Project\\Element.js":"9","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Directory\\SubDirectory.js":"10","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Store.js":"11","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Context.js":"12","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\serverEndpoint.js":"13","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Register.js\\Signup.js":"14","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Register.js\\Register.js":"15","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Register.js\\Login.js":"16"},{"size":706,"mtime":1617470654741,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1610276616987,"results":"19","hashOfConfig":"18"},{"size":1429,"mtime":1613387244586,"results":"20","hashOfConfig":"18"},{"size":6698,"mtime":1613389776299,"results":"21","hashOfConfig":"18"},{"size":4979,"mtime":1613392551033,"results":"22","hashOfConfig":"18"},{"size":4879,"mtime":1613394776078,"results":"23","hashOfConfig":"18"},{"size":3823,"mtime":1613231396534,"results":"24","hashOfConfig":"18"},{"size":1001,"mtime":1610451069728,"results":"25","hashOfConfig":"18"},{"size":1930,"mtime":1613390708624,"results":"26","hashOfConfig":"18"},{"size":2571,"mtime":1613366521052,"results":"27","hashOfConfig":"18"},{"size":171,"mtime":1610357452353,"results":"28","hashOfConfig":"18"},{"size":474,"mtime":1610371427634,"results":"29","hashOfConfig":"18"},{"size":119,"mtime":1613387971730,"results":"30","hashOfConfig":"18"},{"size":2874,"mtime":1613385008616,"results":"31","hashOfConfig":"18"},{"size":1236,"mtime":1613383958447,"results":"32","hashOfConfig":"18"},{"size":2595,"mtime":1613385195936,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1u3itse",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"38"},"C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\index.js",["81","82"],"C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\reportWebVitals.js",[],["83","84"],"C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\App.js",["85","86","87"],"import ProjectBar from './Project/ProjectBar';\r\nimport './App.css';\r\nimport React from 'react'\r\nimport { ENDPOINT } from './serverEndpoint.js';\r\nimport Register from './Register.js/Register';\r\n\r\n// App.js \r\n\r\n// functionality -> fetches the details of the current user \r\n// we have the current user_id stored in the cookie as the jwt\r\n// get the current user details using jwt token\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      data:\"\",\r\n      projects:\"\",\r\n      directory:\"\",\r\n      user:\"\",\r\n      id:\"\"\r\n    }\r\n  }\r\n  componentDidMount=()=>{\r\n    //fetch the details of current user using /finduserbyid/${user_id}\r\n    // update the state of current user\r\n    // pass the props down to ProjectBar.js \r\n    var id = localStorage.getItem('_id');\r\n    this.setState({\r\n      id:id\r\n    })\r\n  }\r\n\r\n  setUserId=(user_id)=>{\r\n    this.setState({\r\n      id:user_id\r\n    })\r\n  }\r\n\r\n  logout=()=>{\r\n    // delete localstorage\r\n    localStorage.removeItem('_id');\r\n\r\n    this.setState({\r\n      id:\"\"\r\n    })\r\n  }\r\n  // componentDidMount(){\r\n    \r\n  // }\r\n  render(){\r\n    if(this.state.id==\"\" || this.state.id == undefined){\r\n      return(\r\n        <div className=\"App\" >\r\n          <Register setUserId={this.setUserId}/>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n      return(\r\n        <ProjectBar logout={this.logout}/>\r\n      )\r\n    }\r\n    \r\n}\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Monaco\\index.js",["88","89","90"],"import React, { createElement } from 'react';\r\nimport { render } from 'react-dom';\r\nimport MonacoEditor from 'react-monaco-editor';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport './index.css';\r\n// import io from 'socket.io-client'   \r\nimport {ENDPOINT} from '../serverEndpoint';\r\n\r\n\r\n    \r\n// var socket = io(url, {transports: ['websocket', 'polling', 'flashsocket']});\r\nconst socket = socketIOClient(ENDPOINT);\r\n\r\n\r\n\r\n\r\n// compilercode stores the current code in compiler\r\nvar compilerCode=\"\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      code: '',\r\n      id:''\r\n    }\r\n   this.updateCode=this.updateCode.bind(this)\r\n   this.updateCursor=this.updateCursor.bind(this)\r\n   this.sendCode=this.sendCode.bind(this)\r\n   this.updateId=this.updateId.bind(this)\r\n   \r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n  //  function gets triggered when subdirectory changes\r\n  //  function starts listening to the socket\r\n  startSocket=()=>{\r\n    this.listenSocket();\r\n  }\r\n\r\n  //  function gets triggered when subdirectory changes\r\n  //  function stops listening to the socket\r\n  turnOffSocket=()=>{\r\n    console.log(\"turning off socket\")\r\n    socket.disconnect() \r\n    socket.off(); // stops listening to all events\r\n  }\r\n\r\n\r\n  // when the compiler code is changed the function is trigerred \r\n  // sends the compiler code to the server\r\n  sendCode=(code)=>{\r\n    let data={\r\n      \"room\":this.props.data.id,\r\n      \"directory\":this.props.data.directory_id,\r\n      \"code\":code\r\n    }\r\n    \r\n    socket.emit(\"code\", data);\r\n\r\n  }\r\n\r\n\r\n\r\n  // function gets emitted when the current user clicks the screen\r\n  // socket is emmited with the current user's location\r\n  \r\n  //gets coordinates of the current user cursor\r\n\r\n  //sends the cursor coordinates to socket.io server\r\n  sendCoords=(event)=>{\r\n\r\n    let data={\r\n      \"user_name\":\"user1\",\r\n      \"room\":this.state.id,\r\n      \"x\":event.clientX,\r\n      \"y\":event.clientY\r\n    }\r\n    socket.emit(\"coordinates\", data);\r\n    \r\n  }\r\n\r\n  \r\n  //listens for socket.io on current active id\r\n  listenSocket=()=>{\r\n    \r\n    socket.connect();\r\n\r\n    // {room : id of the current active subdirectory}\r\n    let channel={\"room\":this.props.data.id}\r\n    \r\n    // join the current active room\r\n    socket.emit(\"join_room\",channel);\r\n\r\n    //calling update cursor function when gets coordinates from server\r\n    socket.on('coordinates',data=>{\r\n      this.updateCursor(data)\r\n    })\r\n\r\n    //calling update code function when gets code from server\r\n    socket.on('code',data=>{\r\n      this.updateCode(data.code)\r\n    });\r\n\r\n  }\r\n\r\n  // function gets trigerred when socket emits cursor change emit\r\n  //function to position duplicate cursor (user2) on user screen\r\n  updateCursor=(data)=>{\r\n    let x=data.x\r\n    let y=data.y\r\n\r\n    y=y-10;\r\n\r\n    const cursor = document.getElementById('cursor');\r\n    cursor.style.left = x+'px';\r\n    cursor.style.top = y+'px';\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //Monaco functions \r\n\r\n\r\n  // do not modify\r\n  editorDidMount(editor, monaco) {\r\n    // console.log('editorDidMount', editor);\r\n    editor.focus();\r\n  }\r\n  \r\n  //updates the compiler code\r\n  updateCode=(code)=>{\r\n    this.setState({\r\n      code:code\r\n    });\r\n  }\r\n\r\n  // function gets trigerred when code changes in the compiler\r\n  // do not modify\r\n  onChange=(newValue, e)=>{\r\n    compilerCode=newValue;\r\n    // console.log(newValue)\r\n    this.sendCode(compilerCode);\r\n    // console.log('onChange', newValue, e);\r\n  }\r\n\r\n  //returns the code written in compiler in JSON string format\r\n  getData(){\r\n    let output=compilerCode\r\n    return output;\r\n  }\r\n\r\n  //switches between the compiler window and messaging app\r\n  changeWindow=(editor)=>{\r\n\r\n    let element_editor=this.refs.Editor;\r\n    let element_message=this.refs.Message;\r\n    \r\n    if(editor){\r\n      //change to editor\r\n      element_editor.classList.add(\"active\");\r\n      element_message.classList.remove(\"active\")\r\n    }\r\n    else{\r\n      //change to message\r\n      element_message.classList.add(\"active\");\r\n      element_editor.classList.remove(\"active\")\r\n    }\r\n    \r\n  }\r\n\r\n  //  fetches the code from server of the current active subdirectory\r\n  //  function gets executed when the new subdirectory is loaded\r\n\r\n  fetchCode(id){\r\n    \r\n    //id is the id of the current active subdirectory\r\n    var endpoint = \"https://livecodebackend.herokuapp.com/findcodebyid/\"+id;\r\n    \r\n    fetch(endpoint)\r\n    \r\n    .then(data=>data.json()\r\n    .then(data=>{\r\n      // update the code of the new code fetched from the server\r\n      this.updateCode(data.code);\r\n    })\r\n    )\r\n    .catch(err=>{\r\n      console.log(err);\r\n    })\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //lifecycle funtions\r\n\r\n  // updates the id of the current active subdirectory\r\n  updateId=(newid)=>{\r\n\r\n    this.setState({\r\n      \"id\":newid\r\n    })\r\n\r\n  }\r\n\r\n\r\n// when the props from parent changes\r\n// new props are set as states\r\n  static getDerivedStateFromProps(props, state) {\r\n    return {id: props.data.id };\r\n  }\r\n\r\n  // when current subdirectory changes the function gets triggered\r\n  componentDidUpdate(prevProps,prevState) {\r\n    \r\n    if(this.state.id != prevState.id){\r\n       // turn off all previous socket connections \r\n    this.turnOffSocket();\r\n    \r\n    // update the id of the current active subdirectory\r\n    // this.updateId(this.props.data.id);\r\n\r\n    // start listening on the current subdirectory\r\n    this.startSocket();\r\n\r\n    // fetch code of the current active subdirectory\r\n    this.fetchCode(this.props.data.id);    \r\n    \r\n      // this.fetchCode(this.state.id)\r\n      console.log(\"State changed\")\r\n    }\r\n    // this.fetchCode()\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  render() {\r\n    const code = this.state.code;\r\n    const options = {\r\n      selectOnLineNumbers: true\r\n    };\r\n\r\n    return (\r\n      <div className=\"Editor-Parent\">\r\n      <div className=\"Editor-Category\">\r\n        <input type=\"button\" className=\"btn active\" ref=\"Editor\" onClick={()=>this.changeWindow(true)} value=\"Editor\"/>\r\n        <input type=\"button\" className=\"btn\" ref=\"Message\" onClick={()=>this.changeWindow(false)} value=\"Messages\"/>\r\n        {/* <input type=\"button\" className=\"btn\" ref=\"Data\" onClick={()=>this.sendCode()}  value=\"get Data\"/> */}\r\n      </div>\r\n      <div className=\"Editor\" onClick={this.sendCoords.bind(this)}>\r\n        <h3 id=\"cursor\">cursor</h3>\r\n      <MonacoEditor\r\n        width=\"80vw\"\r\n        height=\"90vh\"\r\n        language=\"javascript\"\r\n        theme=\"vs-dark\"\r\n        value={code}\r\n        options={options}\r\n        onChange={this.onChange}\r\n        editorDidMount={this.editorDidMount}\r\n      />\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n\r\n","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Directory\\DirectoryBar.js",["91","92"],"\r\nimport { Component } from 'react';\r\nimport Directory from './Directory'\r\nimport './DirectoryBar.css';\r\nimport Monaco from '../Monaco/index';\r\n\r\n\r\n// Parent Component is ProjectBar\r\n      // props received are -> directories : json object that holds details of all the directories of CURRENT project\r\n\r\n// Child Components :\r\n      \r\n      // Directory \r\n          // props passed:\r\n              // id => id of the current directory\r\n              // name => name of the current directory\r\n              // subdirectories => data of all the directories\r\n              // data => directory + subdirectory data\r\n              // changeSubdirectory => function changes current active subdirectory when subdirectory is clicked upon \r\n              //                        this function is passed to => directory => subdirectory.js (here click event is trigerred)\r\n              \r\n      // Monaco Editor\r\n        // props passed:\r\n            // data => subdirectories data -> has the data of all the directories and project id\r\n\r\nclass DirectoryBar extends Component{\r\n\r\n    constructor(props){\r\n      super(props)\r\n        this.state={\r\n          user:\"user\",\r\n          directories:\"\",\r\n          arr:\"\",\r\n          subdirectory_data:\"\",\r\n          project_name:\"\",\r\n          project_id:\"\",\r\n          project_description:\"\"\r\n\r\n        }\r\n      }\r\n      updateProjectDetails=(project_details)=>{\r\n        this.setState({\r\n          project_name:project_details.name,\r\n          project_id:project_details._id,\r\n          project_description:project_details.description\r\n        })\r\n      }\r\n      //gets triggered on project change\r\n      componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if(this.props != prevProps){\r\n          console.log(\"directorybar\",this.props.project_details)\r\n          this.updateProjectDetails(this.props.project_details)\r\n        var directories = this.props.directories ;\r\n        let count=directories.length\r\n          \r\n                var arr=[] \r\n\r\n                for(let i = 0 ; i < count ; i++ ){\r\n                  \r\n                  let element=<Directory id={directories[i]._id} name={directories[i].name} subdirectories={directories[i].subdirectories}  data={directories[i]} changeSubdirectory={this.changeSubdirectory}/>\r\n                  arr.push(element)\r\n                }\r\n              \r\n                  this.setState({\r\n                  // \"user\":user,\r\n                  \"directories\":directories,\r\n                  \"data\":arr,\r\n                })}\r\n      }\r\n\r\n      //function gets triggerred when the user changes(clicks) subdirectory\r\n      //adds the active-subdirectory class to subdirectory object\r\n      activateSubdirectory=(newId)=>{\r\n        //newId is the id of the element that is clicked\r\n\r\n        var activeObject = document.getElementById(newId);\r\n        \r\n        if(activeObject!=undefined && activeObject!=null){\r\n          activeObject.classList.add(\"active-subdirectory\");\r\n        }\r\n      \r\n      }\r\n      \r\n      //function gets triggerred when the user changes(clicks) subdirectory\r\n      //removes the active-subdirectory class from all the subdirectory object\r\n      deactivatePreviousSubdirectory=()=>{\r\n        \r\n          var inactiveObject = document.getElementsByClassName(\"SubDirectory\");\r\n        \r\n          for(let itr = 0 ; itr < inactiveObject.length ; itr ++){\r\n            inactiveObject[itr].classList.remove(\"active-subdirectory\");\r\n          }\r\n\r\n      }\r\n\r\n      //changes sub directory \r\n      // trigerred when user changes(clicks) subdirectory\r\n      // passed from director-bar to directory to subdirectory\r\n      changeSubdirectory=(data)=>{\r\n\r\n        //data holds the details of the subdirectory being clicked\r\n        console.log(data)\r\n        this.deactivatePreviousSubdirectory();\r\n\r\n        this.activateSubdirectory(data.id);\r\n        \r\n        this.setState({\r\n          \"subdirectory_data\":data\r\n        })\r\n\r\n        \r\n\r\n    }\r\n    \r\n    render(){\r\n      return (\r\n        \r\n        <div className=\"DirectoryBar-parent\">\r\n          <div className=\"Directory\">\r\n            <div className=\"DirectoryBar-User\">\r\n\r\n                {/* <div className=\"Project-Name Project-Details\">\r\n                  {this.state.project_name}\r\n                </div> */}\r\n                <div className=\"Project-Description Project-Details\">\r\n                  {this.state.project_description}\r\n                </div>\r\n                <div className=\"Project-Id Project-Details\">\r\n                  ({this.state.project_id})\r\n                </div>\r\n              \r\n\r\n            </div>      \r\n\r\n            <div className=\"DirectoryBar-List\">\r\n\r\n                  {this.state.data}\r\n\r\n            </div>      \r\n          </div> \r\n\r\n          <div className=\"Monaco-Wrapper\">\r\n\r\n              <Monaco data={this.state.subdirectory_data}/>\r\n              \r\n          </div>\r\n\r\n        </div>\r\n        \r\n  \r\n      )\r\n    }\r\n  }\r\n  \r\n  export default DirectoryBar;\r\n  ","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Project\\ProjectBar.js",["93","94","95"],"\r\nimport { Component } from 'react';\r\nimport Element from './Element'\r\nimport './ProjectBar.css';\r\nimport DirectoryBar from '../Directory/DirectoryBar.js'\r\nimport { ENDPOINT } from '../serverEndpoint';\r\n\r\n\r\n\r\n// ProjectBar is child of ../App.js\r\n// App.js passes data as props\r\n\r\n// Props received is an array which contains projects data \r\n    //prop name : Projects\r\n\r\n// Child of ProjectBar is Element.js\r\n// child is ProjectBar is -> \r\n\r\n    //  -> Element.js \r\n\r\n        // Element.js : This component holds the details of the projects\r\n        // props passed are :\r\n            // index -> current index in the loop is passed \r\n            // id -> the project id \r\n            // name -> the peoject name\r\n            // directories -> the directories present in the current project\r\n            // function activeProject -> this function is responsible for changing the current active project\r\n    \r\n    //  -> DirectoryBar.js\r\n        // DirectoryBar.js -> This component renders all the directories present in current active project\r\n        // props passed are -> directories : json object that holds all the directories of CURRENT ACTIVE project\r\n        \r\n\r\n\r\n// DirectoryBar is passed current active project details \r\nclass ProjectBar extends Component{\r\n\r\n    constructor(props){\r\n      super(props)\r\n        this.state={\r\n          data:\"\",\r\n          active_project:\"\",\r\n          projects:\"\",\r\n          active_project_details:\"\"\r\n        }\r\n      }\r\n\r\n      //update background\r\n      updateBackground=(id)=>{\r\n\r\n        var active_object = document.getElementById(id)\r\n\r\n        active_object.classList.add(\"active_project\");\r\n\r\n        // remove active-project class from all other components\r\n        var inactive_objects = document.getElementsByClassName(\"active_project\");\r\n\r\n\r\n        for(let itr=0;itr<inactive_objects.length;itr++){\r\n\r\n          if(inactive_objects[itr].id!=id){\r\n            inactive_objects[itr].classList.remove(\"active_project\");}\r\n\r\n          }\r\n        \r\n      }\r\n\r\n      // when project elment is clicked following function is called\r\n      // function changes existing project\r\n      // function is passed as props to element.js\r\n      activeProject=(project_id)=>{\r\n        \r\n        var projects = this.state.projects;\r\n        \r\n        // replacing the index of previous project in the array with the current project index\r\n        var active_project=projects[project_id].directories\r\n        var active_project_details=projects[project_id];\r\n\r\n        //update background of active project\r\n        this.updateBackground(active_project_details._id);\r\n\r\n        \r\n        // setting state of current active project\r\n        this.setState({\r\n          active_project:active_project,\r\n          active_project_details:active_project_details\r\n        })\r\n\r\n      }\r\n\r\n\r\n      static getDerivedStateFromProps(props, state) {\r\n        return {id: localStorage.getItem('_id') };\r\n      }\r\n      \r\n      // get data from props -> this.props.projects\r\n      // get all the projects from this.props.projects and make an array\r\n      // render the array element currently clicked\r\n      componentDidMount(){\r\n        \r\n        var user_id = localStorage.getItem('_id')\r\n\r\n        var fetch_url=ENDPOINT+'/finduserbyid/'+this.state.id;\r\n        console.log(fetch_url);\r\n        fetch(fetch_url)\r\n        .then(data=>data.json())\r\n        .then(data=>{\r\n          \r\n          var count = data.projects.length;\r\n          var arr = []\r\n      \r\n          for( var i = 0 ; i < count ; i++ ){\r\n            var project=data.projects[i]\r\n            console.log(\"current project\",project._id,project.name)\r\n            var element=<Element index={i} id={project._id} name={project.name} directories={project[i]} activeProject={this.activeProject}/>\r\n            arr.push(element)\r\n          }\r\n          var active=0;\r\n\r\n          let first_project_id = data.projects[0]._id\r\n          console.log(first_project_id)\r\n          // this.updateBackground(first_project_id);\r\n          this.setState({\r\n            \"data\":arr,\r\n            \"projects\":data.projects,\r\n            \"active_project\":data.projects[0].directories,\r\n            \"active_project_details\":data.projects[0]\r\n          })\r\n        })\r\n          \r\n      }\r\n    render(){\r\n      return (\r\n        <div className=\"ProjectBar-parent\">\r\n          <div className=\"ProjectBar\">\r\n            <div className=\"Project-Elements\">\r\n                \r\n                {this.state.data}\r\n\r\n            </div>\r\n            <div className=\"Project-Logout\">\r\n              <button className=\"logout-button\" onClick={this.props.logout}>Logout</button>\r\n            </div>\r\n          </div>  \r\n          <DirectoryBar directories={this.state.active_project} project_details={this.state.active_project_details}/> \r\n        </div>\r\n  \r\n      )\r\n    }\r\n  }\r\n  \r\n  export default ProjectBar;\r\n  ","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Directory\\Directory.js",["96","97","98","99"],"import { Component } from 'react';\r\n// import Directory from './Directory'\r\nimport './Directory.css';\r\nimport Monaco from '../Monaco/index'\r\nimport url, { modifyUrl } from '../url'\r\nimport SubDirectory from './SubDirectory'\r\n\r\n\r\n// Parent Component is DirectoryBar\r\n      // props received are -> directories : json object that holds details of all the directories of CURRENT project\r\n            // id => id of the current directory\r\n            // name => name of the current directory\r\n            // subdirectories => data of all the directories\r\n            // data => directory + subdirectory data\r\n            // changeSubdirectory => function changes current active subdirectory when subdirectory is clicked upon \r\n            //                        this function is received from directorybar and is passed to subdirectory.js\r\n            //                        (from) Directorybar => directory => subdirectory.js (pass it down as props)\r\n\r\n// Child Components :\r\n      \r\n      // SubDirectory \r\n          // props passed:\r\n            // subdirectory_id => id of i-th subdirectory of current directory\r\n            // directory_id => id of the current directory\r\n            // data => json object - details of the sub-directories \r\n            // changeSubdirectory => function changes current active subdirectory when subdirectory is clicked upon\r\n            //                        this function is received from directorybar and is passed to subdirectory.js\r\n            //                        (from) Directorybar => directory => subdirectory.js (pass it down as props)\r\n            \r\nclass Directory extends Component{\r\n\r\n    constructor(props){\r\n      super(props)\r\n        this.state={\r\n          name:\"directory\",\r\n          id:\"\",\r\n          data:\"\",\r\n          subdirectories:\"\"\r\n        }\r\n      }\r\n   \r\n      // when props from the parent component changes the following function gets trigerred\r\n      // when new project is clicked => the active project changes => the props passed down also gets changed => function gets trigerred\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if(this.props!=prevProps){\r\n            var subdirectories=this.props.subdirectories\r\n            var count = subdirectories.length\r\n        \r\n            var arr=[]\r\n\r\n        for(var i = 0 ; i < count ; i++){\r\n            var subdirectory = <SubDirectory subdirectory_id={subdirectories[i]._id} directory_id={this.props.id} data = {subdirectories[i]} changeSubdirectory={this.props.changeSubdirectory} />\r\n            arr.push(subdirectory)\r\n        }\r\n\r\n         this.setState({\r\n             \"name\":this.props.name,\r\n             \"id\":this.props.id,\r\n             \"data\":this.props.data,\r\n             \"subdirectories\":arr\r\n         })\r\n        }\r\n    }\r\n\r\n    componentDidMount=()=>{\r\n        \r\n        var subdirectories=this.props.subdirectories\r\n        var count = subdirectories.length\r\n        \r\n        var arr=[]\r\n        for(var i = 0 ; i < count ; i++){\r\n            var subdirectory = <SubDirectory subdirectory_id={subdirectories[i]._id} directory_id={this.props.id} data = {subdirectories[i]} changeSubdirectory={this.props.changeSubdirectory} />\r\n            arr.push(subdirectory)\r\n        }\r\n\r\n         this.setState({\r\n             \"name\":this.props.name,\r\n             \"id\":this.props.id,\r\n             \"data\":this.props.data,\r\n             \"subdirectories\":arr\r\n         })\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Directory-Parent\" onClick={this.goto}>\r\n                <div id={this.props.directory_id} className=\"Directory\">\r\n                    <h4>#{this.state.name}</h4>\r\n                </div>\r\n               \r\n                {this.state.subdirectories}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Directory;","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\url.js",["100"],"\r\nexport function modifyUrl(data){\r\n    //get base url\r\n    var base_url=window.location.origin\r\n    \r\n    //get complete url\r\n    var url = window.location.search\r\n\r\n    //get url parameters\r\n    const urlParams = new URLSearchParams(url);\r\n    \r\n    //change url parameters\r\n    if(data.project_id){\r\n        urlParams.set(\"project_id\",data.project_id)\r\n    }\r\n    if(data.directory){\r\n        urlParams.set(\"directory\",data.directory)\r\n    }\r\n    if(data.subdirectory){\r\n        urlParams.set(\"subdirectory\",data.subdirectory)\r\n    }\r\n    var para=urlParams.toString();\r\n    //return the new url\r\n    var newUrl=base_url+'/?'+urlParams.toString()\r\n    return newUrl\r\n}\r\n\r\nexport function getParam(){\r\n    var url = window.location.search\r\n\r\n    const urlParams = new URLSearchParams(url)\r\n    \r\n    var body = {\r\n        \"project_id\":urlParams.get(\"project_id\"),\r\n        \"directory\":urlParams.get(\"directory\"),\r\n        \"subdirectory\":urlParams.get(\"subdirectory\")\r\n    }\r\n    \r\n    return body\r\n}","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Project\\Element.js",["101","102","103","104","105"],"\r\nimport { Component } from 'react';\r\n\r\nimport './Element.css';\r\nimport ProjectBar from './ProjectBar.js';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { modifyUrl } from '../url';\r\n\r\n// Parent Component is ProjectBar\r\n\r\n\r\n// props received are :\r\n            // index -> index of the current project in the array\r\n            // id -> the project id \r\n            // name -> the peoject name\r\n            // directories -> the directories present in the current project\r\n            // function activeProject -> this function is responsible for changing the current active project\r\nclass Element extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n      this.state={\r\n        'name':'name',\r\n        \"id\":'',\r\n        'data':''\r\n      }\r\n      // this.goto=goto.bind(this)\r\n    }\r\n    truncate=(str)=>{\r\n      if(str==undefined){\r\n        return;\r\n      }\r\n      let word= str.toUpperCase();\r\n      word=word[0];\r\n      return word\r\n    }\r\n\r\n    //adds project id into the url\r\n    goto=(e)=>{\r\n      console.log(\"clicked on project\",this.state.id)\r\n      this.props.activeProject(this.state.key)\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n      //get base url of current website\r\n      var base_url=window.location.origin;\r\n      // console.log(this.props.id)\r\n      // console.log(this.props.name)\r\n      // console.log(this.props.data)\r\n      //update the state\r\n      this.setState({\r\n        key:this.props.index,\r\n        id:this.props.id,\r\n        name:this.props.name,\r\n        data:this.props.data\r\n      })\r\n    }\r\n  render(){\r\n    return (\r\n      <div className=\"Element-parent\" id={this.state.id} onClick={this.goto} >\r\n        <div className=\"Element\">\r\n          <div className=\"Element-image-circle\" >\r\n            <h3 className=\"Element-image\" >{this.truncate(this.state.name)}</h3>\r\n          </div>\r\n        </div>      \r\n        \r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Element;\r\n","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Directory\\SubDirectory.js",["106"],"import  { Component } from 'react';\r\nimport './SubDirectory.css';\r\nimport { ENDPOINT } from '../serverEndpoint';\r\n\r\n\r\n\r\n// => Parent is Directory \r\n//     => props received :\r\n            // subdirectory_id => id of i-th subdirectory of current directory\r\n            // directory_id => id of the current directory\r\n            // data => json object - details of the sub-directories \r\n            // changeSubdirectory => function changes current active subdirectory when subdirectory is clicked upon\r\n            //                        this function is received from directorybar and is passed to subdirectory.js\r\n            //                        (from) Directorybar => directory => subdirectory.js (pass it down as props)\r\n\r\n\r\nclass SubDirectory extends Component{\r\n\r\n    constructor(props){\r\n      super(props)\r\n        this.state={\r\n          name:\"subdirectory\",\r\n          id:\"\",\r\n          data:\"\",\r\n          url_params:\"\",\r\n          directory_id:this.props.directory_id\r\n        }\r\n      }\r\n\r\n    //  handles click when current component is clicked (i.e.,  subdirectory changes )\r\n    //  calls function received from directorybar->directory->subdirectory\r\n    //  when current subdirectory is clicked changesubdirectory function is called\r\n    \r\n    handleClickOnSubDirectory=()=>{\r\n\r\n        var data={\r\n            \"id\":this.props.subdirectory_id,\r\n            \"directory_id\":this.props.directory_id,\r\n            \"code\":this.state.code\r\n        }\r\n        this.props.changeSubdirectory(data)\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps,prevState) {\r\n        if(prevProps!=this.props){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //takes props from directory.js\r\n    //set props in state\r\n    componentDidMount=()=>{\r\n        \r\n        var directory = this.props.data\r\n        var id=this.props.directory_id\r\n        var name = directory.name\r\n\r\n        var fetch_url = ENDPOINT+'/'+id;\r\n\r\n        fetch(fetch_url)\r\n        .then(data=>console.log(data))\r\n        .catch(err=>console.log(err))\r\n        \r\n         this.setState({\r\n             \"name\":name,\r\n             \"id\":id\r\n         })\r\n        \r\n    }\r\n    \r\n    render(){\r\n        \r\n        return(\r\n\r\n            <div className=\"SubDirectory-Parent\" onClick={this.handleClickOnSubDirectory}>\r\n                <div id={this.props.subdirectory_id} className=\"SubDirectory\">\r\n                    <h4 >-->{this.props.data.name}</h4>        \r\n                </div>                \r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default SubDirectory;","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Store.js",[],["107","108"],"C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Context.js",["109"],"import React,{Component} from 'react';\r\nexport const Context  = React.createContext();\r\n\r\nexport const ContextProvider=(props)=>{\r\n    var object = {\r\n        code:\"user code...\",\r\n\r\n        setCode : function(data){\r\n            this.code=data;\r\n        },\r\n\r\n        getCode : function(){\r\n            return this.code;\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <Context.Provider value={object}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\n",["110","111"],"C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\serverEndpoint.js",[],"C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Register.js\\Signup.js",["112"],"import React, { Component } from 'react';\r\nimport {ENDPOINT} from '../serverEndpoint';\r\n\r\n// Parent is Register\r\n    // props received:\r\n        // setUserId(user_id)\r\nclass Signup extends Component {\r\n\r\n    fetch_request=(data)=>{\r\n        var post_url = ENDPOINT + \"/signup\";\r\n        \r\n        fetch(post_url, {\r\n            method: 'POST', \r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n\r\n        .then(data=>data.json())\r\n        .then(data=>{\r\n        \r\n            // set user_id in local_storage\r\n            console.log(data);\r\n            let status = data.status\r\n            if(status == \"success\")\r\n            {\r\n                let id = data.id;\r\n\r\n                //set user id in localstorage\r\n                localStorage.setItem(\"_id\", id);\r\n            \r\n                // update state of app.js using setUserId function\r\n                this.props.setUserId(id);\r\n            }\r\n            else{\r\n                alert(\"Wrong Credentials\")\r\n                console.log(data.status,data.value)\r\n            }\r\n\r\n      })\r\n      .catch(err=>{\r\n        alert(\"Cannot connect to the server\")\r\n      })\r\n    }\r\n\r\n    handleSignupClick=()=>{\r\n        //change the active page\r\n\r\n        var name = this.refs.name.value;\r\n        var email = this.refs.email.value;\r\n        var password = this.refs.password.value;\r\n\r\n        var data = {\r\n            \"name\":name,\r\n            \"email\":email,\r\n            \"password\":password\r\n        }\r\n\r\n        this.fetch_request(data);\r\n        \r\n        \r\n    }\r\n    handleLoginClick=()=>{\r\n        console.log(\"Login clicked\");\r\n        this.props.changePage();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Form-Parent\">\r\n                <div className=\"Name-div Input-div\">\r\n                    <input type=\"text\" className=\"name-field Input-field\" placeholder=\"Name\" ref=\"name\"></input>\r\n                </div>\r\n                <div className=\"Email-div Input-div\">\r\n                    <input type=\"email\" className=\"email-field Input-field\" placeholder=\"Email\" ref=\"email\"></input>\r\n                </div>\r\n                <div className=\"Password-div Input-div\">\r\n                    <input type=\"password\" className=\"password-field Input-field\" placeholder=\"Password\" ref=\"password\"></input>\r\n                </div>\r\n\r\n                <div className=\"Buttons-Div Input-div\">\r\n                    <input type=\"button\"className=\"Input-field Register-Buttons inactive-button\" value=\"Login\" onClick={this.handleLoginClick}></input>\r\n                    <input type=\"button\"className=\"Input-field Register-Buttons\" value=\"Signup\" onClick={this.handleSignupClick}></input>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Register.js\\Register.js",["113"],"import React, { Component } from 'react';\r\nimport Signup from './Signup';\r\nimport './Register.css';\r\nimport Login from './Login';\r\n\r\n\r\n\r\n// Parent of current component is App . js \r\n    // props received from app.js is : \r\n        // setUserId(user_id);\r\n        // pass it down to login and signup\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            activePage:<Login changePage={this.changePage} setUserId={this.props.setUserId}/>,\r\n            pageType:\"Login\"\r\n          }\r\n    }\r\n    \r\n    changePage=()=>{\r\n        \r\n        if(this.state.pageType == \"Login\"){\r\n            this.setState({\r\n                activePage: <Signup changePage={this.changePage} setUserId={this.props.setUserId}/>,\r\n                pageType: \"Signup\"\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                activePage: <Login changePage={this.changePage} setUserId={this.props.setUserId}/>,\r\n                pageType: \"Login\"\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Register center\">\r\n                {this.state.activePage}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","C:\\Users\\harshit\\Desktop\\projects\\livecode\\livecode\\src\\Register.js\\Login.js",["114"],"import React, { Component } from 'react';\r\nimport {ENDPOINT} from '../serverEndpoint';\r\n\r\n\r\n// Parent is Register\r\n    // props received:\r\n        // setUserId(user_id)\r\n        \r\nclass Login extends Component {\r\n\r\n    fetch_request=(data)=>{\r\n        var post_url = ENDPOINT + \"/login\";\r\n        \r\n        fetch(post_url, {\r\n            method: 'POST', \r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n\r\n        .then(data=>data.json())\r\n        .then(data=>{\r\n        \r\n            // set user_id in local_storage\r\n            console.log(data);\r\n            let status = data.status\r\n            if(status == \"success\")\r\n            {\r\n                let id = data.id;\r\n\r\n                //set user id in localstorage\r\n                localStorage.setItem(\"_id\", id);\r\n            \r\n                // update state of app.js using setUserId function\r\n                this.props.setUserId(id);\r\n            }\r\n            else{\r\n                alert(\"Wrong Credentials\")\r\n                console.log(data.status,data.value)\r\n            }\r\n\r\n      })\r\n      .catch(err=>{\r\n        alert(\"Cannot connect to the server\")\r\n      })\r\n    }\r\n\r\n    handleSignupClick=()=>{\r\n        // switch to signup page\r\n        console.log(\"signup click\")\r\n        this.props.changePage();\r\n    }\r\n    handleLoginClick=()=>{\r\n        \r\n        var email = this.refs.email.value;\r\n        var password = this.refs.password.value;\r\n\r\n        var data = {\r\n            \"email\":email,\r\n            \"password\":password\r\n        }\r\n\r\n        this.fetch_request(data);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Form-Parent\">\r\n                <div className=\"Email-div Input-div\">\r\n                    <input type=\"email\" className=\"email-field Input-field\" placeholder=\"Email\" ref=\"email\"></input>\r\n                </div>\r\n                <div className=\"Password-div Input-div\">\r\n                    <input type=\"password\" className=\"password-field Input-field\" placeholder=\"Password\" ref=\"password\"></input>\r\n                </div>\r\n\r\n                <div className=\"Buttons-Div Input-div\">\r\n                    <input type=\"button\"className=\"Input-field Register-Buttons inactive-button\" value=\"Signup\" onClick={this.handleSignupClick}></input>\r\n                    <input type=\"button\"className=\"Input-field Register-Buttons\" value=\"Login\" onClick={this.handleLoginClick}></input>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;",{"ruleId":"115","severity":1,"message":"116","line":5,"column":10,"nodeType":"117","messageId":"118","endLine":5,"endColumn":16},{"ruleId":"115","severity":1,"message":"119","line":6,"column":24,"nodeType":"117","messageId":"118","endLine":6,"endColumn":32},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"115","severity":1,"message":"124","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":52,"column":21,"nodeType":"127","messageId":"128","endLine":52,"endColumn":23},{"ruleId":"125","severity":1,"message":"126","line":52,"column":43,"nodeType":"127","messageId":"128","endLine":52,"endColumn":45},{"ruleId":"115","severity":1,"message":"129","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":30},{"ruleId":"115","severity":1,"message":"130","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":16},{"ruleId":"125","severity":1,"message":"131","line":246,"column":22,"nodeType":"127","messageId":"128","endLine":246,"endColumn":24},{"ruleId":"125","severity":1,"message":"131","line":51,"column":23,"nodeType":"127","messageId":"128","endLine":51,"endColumn":25},{"ruleId":"125","severity":1,"message":"131","line":79,"column":24,"nodeType":"127","messageId":"128","endLine":79,"endColumn":26},{"ruleId":"125","severity":1,"message":"131","line":61,"column":38,"nodeType":"127","messageId":"128","endLine":61,"endColumn":40},{"ruleId":"115","severity":1,"message":"132","line":101,"column":13,"nodeType":"117","messageId":"118","endLine":101,"endColumn":20},{"ruleId":"115","severity":1,"message":"133","line":118,"column":15,"nodeType":"117","messageId":"118","endLine":118,"endColumn":21},{"ruleId":"115","severity":1,"message":"134","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":14},{"ruleId":"115","severity":1,"message":"135","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":11},{"ruleId":"115","severity":1,"message":"136","line":5,"column":15,"nodeType":"117","messageId":"118","endLine":5,"endColumn":24},{"ruleId":"125","severity":1,"message":"131","line":46,"column":22,"nodeType":"127","messageId":"128","endLine":46,"endColumn":24},{"ruleId":"115","severity":1,"message":"137","line":22,"column":9,"nodeType":"117","messageId":"118","endLine":22,"endColumn":13},{"ruleId":"115","severity":1,"message":"138","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":18},{"ruleId":"115","severity":1,"message":"139","line":6,"column":10,"nodeType":"117","messageId":"118","endLine":6,"endColumn":20},{"ruleId":"115","severity":1,"message":"136","line":7,"column":10,"nodeType":"117","messageId":"118","endLine":7,"endColumn":19},{"ruleId":"125","severity":1,"message":"126","line":30,"column":13,"nodeType":"127","messageId":"128","endLine":30,"endColumn":15},{"ruleId":"115","severity":1,"message":"140","line":47,"column":11,"nodeType":"117","messageId":"118","endLine":47,"endColumn":19},{"ruleId":"125","severity":1,"message":"131","line":46,"column":21,"nodeType":"127","messageId":"128","endLine":46,"endColumn":23},{"ruleId":"120","replacedBy":"141"},{"ruleId":"122","replacedBy":"142"},{"ruleId":"115","severity":1,"message":"143","line":1,"column":15,"nodeType":"117","messageId":"118","endLine":1,"endColumn":24},{"ruleId":"120","replacedBy":"144"},{"ruleId":"122","replacedBy":"145"},{"ruleId":"125","severity":1,"message":"126","line":26,"column":23,"nodeType":"127","messageId":"128","endLine":26,"endColumn":25},{"ruleId":"125","severity":1,"message":"126","line":24,"column":32,"nodeType":"127","messageId":"128","endLine":24,"endColumn":34},{"ruleId":"125","severity":1,"message":"126","line":28,"column":23,"nodeType":"127","messageId":"128","endLine":28,"endColumn":25},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","no-native-reassign",["146"],"no-negated-in-lhs",["147"],"'ENDPOINT' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'createElement' is defined but never used.","'render' is defined but never used.","Expected '!==' and instead saw '!='.","'user_id' is assigned a value but never used.","'active' is assigned a value but never used.","'Monaco' is defined but never used.","'url' is defined but never used.","'modifyUrl' is defined but never used.","'para' is assigned a value but never used.","'ProjectBar' is defined but never used.","'useHistory' is defined but never used.","'base_url' is assigned a value but never used.",["146"],["147"],"'Component' is defined but never used.",["146"],["147"],"no-global-assign","no-unsafe-negation"]